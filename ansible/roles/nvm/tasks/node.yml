- name: Install Node binary
  shell: >-
    source {{ nvm_root }}/nvm.sh && nvm install {{ nvm_node_version }}
  args:
    executable: /bin/bash
    creates: "{{ nvm_root }}/versions/node/{{ nvm_node_version }}"
  register: result

# Update the version used by nvm and reflected in 'node' and 'npm' binaries.

- name: Get current Node version
  shell: >-
    source {{ nvm_root }}/nvm.sh && nvm current
  args:
    executable: /bin/bash
  register: nvm_current

- name: Set current_node_version fact
  set_fact:
    current_node_version: "{{ nvm_current.stdout | trim() }}"

- name: Default to newly installed Node version
  shell: >-
    source {{ nvm_root }}/nvm.sh && nvm alias default {{ nvm_node_version }}
  args:
    executable: /bin/bash
  when: "current_node_version != nvm_node_version"

# Get Node and npm bin paths, taking into account that Ansible does not run
# commands as a user by default.
# See: https://stackoverflow.com/a/58744872

- name: Get node binary path
  shell: bash -ilc 'which node'
  register: which_node

- name: Set node_bin_path fact
  set_fact:
    node_bin_path: "{{ which_node.stdout | trim() }}"

- name: Get npm binary path
  shell: bash -ilc 'which npm'
  register: which_npm

- name: Set npm_bin_path fact
  set_fact:
    npm_bin_path: "{{ which_npm.stdout | trim() }}"

# Create symlinks to node/npm. This step is required so that Ansible
# commands can access them without having to refer to the full binary paths.
# (Nvm shims are only available through a shell, which, again, Ansible does not do by default.)

- name: Create node bin symlink
  file:
    src: "{{ node_bin_path }}"
    dest: /usr/local/bin/node
    state: link
  become: true

- name: Create npm bin symlink
  file:
    src: "{{ npm_bin_path }}"
    dest: /usr/local/bin/npm
    state: link
  become: true
